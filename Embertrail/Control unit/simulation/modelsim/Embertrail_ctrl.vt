// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/31/2014 13:11:53"
                                                                                
// Verilog Test Bench template for design : Embertrail_ctrl
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`define ADDR 	4'b0000
`define ANDI 	4'b0001
`define ORI		4'b0010
`define NOTI	4'b0011
`define XORI	4'b0100
`define MVR  	4'b0101
`define MVI  	4'b0110
`define LDR		4'b0111
`define LDA		4'b1000
`define STR 	4'b1001
`define PUSH	4'b1010
`define POP  	4'b1011
`define BEQ 	4'b1100
`define SHIFTL	4'b1101
`define SHIFTR	4'b1110
//define BEQ  	4'b1111

`define PAIR 1'b1
`define SINGLE 1'b0
`define IMMB 1'b1
`define REGB 1'b0

`define NOPS 16'b0
`define NOPP 31'b0

`timescale 1 ns/ 1 ns
module Embertrail_ctrl_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [31:0] IR_d, IR_q;
wire [15:0] PC;
reg clock;
reg reset;
//small pseudo instruciton memory
reg [15:0] instMem [34:0];

//small pseudo data memory
reg [15:0] dataMem [31:0];

//data and instruction bus
reg [31:0]   
  dataDataBusOut;

//data and instruction bus control
reg
  instMemEn,
  dataBus1En,
  dataBus2En,
  dataBus1RW,
  dataBus2RW;
  
// wires 
//select object from memory that are then laoded into busses/registers
wire [31:0] dataAddrBus;
wire [15:0] instAddrBus;
wire [31:0] dataDataBusIn;
wire
  data1MemRW,
  data2MemRW,
  data1BusEn,          
  data2BusEn;
// wires                                               
initial //set clock
 begin: clockgen
    clock = 0;
    forever #5
      clock = !clock;
  end

// assign statements (if any)  
 assign PC = instAddrBus;


Embertrail_top i1 (
// port map - connection between master ports and signals/registers   
  .iIR(IR_q),
  .iPC(PC),
  .iClock(clock),
  .iReset(reset),
  .iDataDataBus(dataDataBusOut),   //data goes out 
  .oDataDataBus(dataDataBusIn), 
  .oDataAddrBus(dataAddrBus),  //address comes in
  .oInstAddrBus(instAddrBus),  
  .oDataMem1RW(data1MemRW),         //read/write L/H
  .oDataMem2RW(data2MemRW),
  .oData1BusEn(data1BusEn),
  .oData2BusEn(data2BusEn)  
);


initial    
begin : reg_init_l                                                 
// code that executes only once                        
// insert code here --> begin                          
reg[6:0] i;

  reset =1;
  #10 
  reset =0; 
  
 /*
  instMem[0] = {`SINGLE, `IMMB, (5'h0A), (5'h07), `MVR}; //27 in r7 end boundry
  instMem[1] = {`PAIR, `IMMB, (5'h1), (5'h04), `MVR}; //27 in r4  index
  instMem[2] = {`SINGLE, `IMMB, (5'h1), (5'h03), `MVR}; //27 in r4  start address
  instMem[3] = {`SINGLE, `IMMB, (5'h07), (5'h04), `BEQ}; //does index = boundry
  instMem[4] = 16'h000A;
  instMem[5] = {`PAIR, `IMMB, (5'h01), (5'h03), `ADDR}; // place the value for r4 in position r2  
  instMem[6] = {`SINGLE, `IMMB, (5'h01), (5'h04), `ADDR};
  instMem[7] = {`SINGLE, `REGB, (5'h03), (5'h04), `STR}; // Store index
  instMem[8] = {`PAIR, `IMMB,   (5'h00), (5'h00), `BEQ}; //check again
  instMem[9] = 16'h0003;
  instMem[10] = {`PAIR, `IMMB,   (5'h00), (5'h00), `BEQ}; //check again
  instMem[11] = 16'h000A;
  instMem[12] = {`NOPS};
  */
  //instMem[13] = {};
  //instMem[14] = {};
  
  
//Big boy test -Load in two values, determine if they are equal, increment the lower one until they are, then store them
/*
  dataMem[15] = 16'h000A;
  dataMem[16] = 16'h0007;
  instMem[0] = {`PAIR, `IMMB,   (5'h00), (5'h01), `LDA}; //load data address 15 into r1
  instMem[1] = 16'h000F;
  instMem[2] = {`PAIR, `IMMB,   (5'h00), (5'h02), `LDA};  //load data address 16 into r2
  instMem[3] = 16'h0010; 
  instMem[5] = { `PAIR, `REGB,  (5'h01), (5'h03), `MVR};  //save the address in r3
  instMem[6] = {`SINGLE,`REGB,  (5'h02), (5'h04), `MVR};  //save the address in r4  
  instMem[7] = {`PAIR,   `REGB,   (5'h01), (5'h05), `LDR}; //read address from r1 and place in r5
  instMem[8] = {`SINGLE, `REGB,   (5'h02), (5'h06), `LDR}; //read address from r2 and place in r6 
  instMem[9] = {`PAIR, `REGB,   (5'h05), (5'h06), `BEQ}; //does r1 = r2?  
  instMem[10] = 16'h000E; // if it does jump to end of program    
  instMem[11] = {`SINGLE, `IMMB, (5'h01), (5'h06), `ADDR}; //inc r6
  instMem[12] = {`PAIR, `IMMB,   (5'h00), (5'h00), `BEQ}; //check again
  instMem[13] = 16'h0009;
  //instMem[14] = {`PAIR, `IMMB, (5'h03),(5'h01),`ADDR};
  instMem[14] = {`PAIR, `IMMB, (5'h04),(5'h02),`ADDR};
  instMem[15] = {`SINGLE,  `IMMB, (5'h0F), (5'h01), `ADDR}; //add something to r1 to confirm store
  instMem[16] = {`SINGLE, `REGB, (5'h02), (5'h04), `STR}; // place the value for r4 in position r2  
  instMem[17] = {`SINGLE, `REGB, (5'h01), (5'h03), `STR};
*/ 
  //instMem[19] = {`SINGLE, `REGB, (5'h01), (5'h03), `STR};
  //instMem[19] = `NOPS;
 //end of big boy test 

 
//modify an array
/*
dataMem[1] = 16'h0004;
dataMem[2] = 16'h0005;
dataMem[3] = 16'h0006;
dataMem[4] = 16'h0007;
*/
//set up dmem values
/*
 instMem[0] =   { `PAIR, `IMMB,  (5'h01), (5'h03), `MVR}; 
 instMem[1] =   {`SINGLE,`IMMB,  (5'h02), (5'h04), `MVR};
 instMem[2] =   { `PAIR, `IMMB,  (5'h01), (5'h01), `MVR}; 
 instMem[3] =   {`SINGLE,`IMMB,  (5'h02), (5'h02), `MVR};  
 instMem[4] =   { `PAIR, `REGB, (5'h01), (5'h03), `STR}; 
 instMem[5] =   {`SINGLE,`REGB, (5'h02), (5'h04), `STR}; 

 instMem[6] =   { `PAIR, `IMMB,  (5'h03), (5'h01), `MVR}; 
 instMem[7] =   {`SINGLE,`IMMB,  (5'h04), (5'h02), `MVR}; 
 instMem[8] =   { `PAIR, `IMMB,  (5'h04), (5'h03), `MVR}; 
 instMem[9] =   {`SINGLE,`IMMB,  (5'h08), (5'h04), `MVR}; 
 instMem[10]=   { `PAIR, `REGB,  (5'h01), (5'h03), `STR}; 
 instMem[11]=   {`SINGLE,`REGB,  (5'h02), (5'h04), `STR}; 
 
 instMem[12] =   {  `PAIR,`IMMB,  (5'h10), (5'h01), `MVR}; 
 instMem[13] =   {`SINGLE,`IMMB,  (5'h05), (5'h02), `MVR}; 
 instMem[14] =   {`SINGLE,`REGB,  (5'h02), (5'h01), `STR}; 
 
//end intialisation
//main program
 instMem[15]=   { `PAIR, `IMMB,  (5'h01), (5'h01), `MVR};  //index = 1 r1
 instMem[16]=   {`SINGLE,`IMMB,  (5'h02), (5'h02), `MVR}; //index 2 = 2 r2
 instMem[17]=   { `PAIR, `IMMB,  (5'h04), (5'h05), `MVR}; //boundary = 4 r5
 instMem[18]=   {` PAIR,`REGB,  (5'h01), (5'h03), `LDR};  //load array item 1 value into r3
 instMem[19]=   { `PAIR, `REGB,  (5'h02), (5'h04), `LDR};  //load array item 2 value into r4
 instMem[20]=   `NOPS;
 instMem[21]=   {`SINGLE, `IMMB,  (5'h01), (5'h03), `SHIFTL}; //shift left 1
 instMem[22]=   {`SINGLE, `IMMB,  (5'h01), (5'h04), `SHIFTL}; //shift left 1
 instMem[23]=   {`PAIR  ,`REGB,  (5'h01), (5'h03), `STR}; //Store item 1
 instMem[24]=   {`SINGLE,`REGB,  (5'h02), (5'h04), `STR}; //Store item 2
 instMem[25]=   {`PAIR,  `REGB,  (5'h01), (5'h05), `BEQ}; //does index 1 = boundary
 instMem[26]=   16'h001F;											 //if yes jump out
 instMem[27]=   {`PAIR,  `IMMB,  (5'h01), (5'h01), `ADDR}; //increment index 1
 instMem[28]=   {`SINGLE,`IMMB,  (5'h01), (5'h02), `ADDR}; //increment index 2
 instMem[29]=   {`PAIR,  `REGB,  (5'h00), (5'h00), `BEQ}; //unconditional jump
 instMem[30]=   16'h0013;
 instMem[31]=   {`PAIR,  `REGB,  (5'h00), (5'h00), `BEQ}; //unconditional jump
 instMem[32]=   16'h001F;
 */
 

//LDR load + store test
/*
  dataMem[22] = 16'hff11;
  instMem[0] = {`PAIR,  `IMMB,   (5'h0A), (5'h01), `MVR}; //place addres value 0x000A -> r1
  instMem[1] = {`SINGLE,`IMMB,   (5'h05), (5'h02), `MVR}; //place addres value 0x000A -> r10  
  instMem[2] = {`PAIR,  `REGB,   (5'h01), (5'h02), `STR}; //place value 0x1f in the addres of r26
  instMem[3] = {`SINGLE,`REGB,   (5'h02), (5'h01), `STR}; //place value 0x1f in the addres of r26
  instMem[4] = {`PAIR,  `REGB,   (5'h02), (5'h02), `LDR}; //read address from r10 -> r11
  instMem[5] = {`SINGLE,`REGB,   (5'h01), (5'h01), `LDR}; //read address from r10 -> r11
  
 */
  //instMem[4] = {`SINGLE, `IMMB, (5'h1f), (5'h1A), `STR}; //place value 0x1f in the addres of r26
 


  //MVR test
  /*
 instMem[0] =   `NOPS;  //set r10 to 16
 instMem[1] =   { `PAIR, `IMMB,  (5'h01), (5'h01), `MVR};  //set r10 to 16
 instMem[2] =   {`SINGLE,`IMMB,  (5'h02), (5'h02), `MVR}; //set r3 to 4
 instMem[3] =   { `PAIR, `IMMB,  (5'h13), (5'h03), `MVR};
 instMem[4] =   {`SINGLE,`IMMB,  (5'h04), (5'h04), `MVR};
 instMem[5] =   { `PAIR, `IMMB,  (5'h15), (5'h05), `MVR};
 instMem[6] =   {`SINGLE,`IMMB,  (5'h06), (5'h06), `MVR};
 instMem[7] =   { `PAIR, `IMMB,  (5'h17), (5'h07), `MVR}; 
 instMem[8] =   {`SINGLE,`IMMB,  (5'h08), (5'h08), `MVR};
 instMem[9] =   `NOPP; 
 */
 
 //LDA test
 /*
 instMem[0] = {`PAIR, `IMMB,  (5'h01), (5'h01), `LDA};
 instMem[1] = 16'h0004;
 instMem[2] = {`PAIR, `REGB,  (5'h00), (5'h02), `LDA};
 instMem[3] = 16'h0010;
 */ 
 //BEQ test
 /*
  dataMem[7] = 16'h0005;
  dataMem[26] = 16'h000F;
  instMem[0] = `NOPS;
  instMem[1] = {`PAIR, `IMMB, (5'h00),(5'h01),`LDA};
  instMem[2] = 16'h0007;
  instMem[3] = {`PAIR, `IMMB, (5'h00),(5'h02),`LDA};
  instMem[4] = 16'h001A;
  instMem[5] = {`PAIR, `REGB, (5'h01),(5'h01),`LDR};
  instMem[6] = {`SINGLE, `REGB, (5'h02),(5'h02),`LDR};
  instMem[7] = {`PAIR, `REGB, (5'h02),(5'h01),`BEQ};
  instMem[8] = 16'h0007;
  instMem[9] = {`SINGLE, `IMMB, (5'h01),(5'h01),`ADDR};
  instMem[10] = {`PAIR, `REGB, (5'h00), (5'h00),`BEQ};
  instMem[11] = 16'h0007;
  instMem[12] = `NOPS;
 */
 //
 //dual issue test
 /*
  dataMem[2] = 16'h01F0;
  dataMem[7] = 16'hF0F0;
  instMem[0] = {`PAIR, `IMMB, (5'h01),(5'h01),`MVR};
  instMem[1] = {`SINGLE, `IMMB, (5'h06),(5'h02),`MVR};
  instMem[2] = {`PAIR, `REGB, (5'h02),(5'h01),`STR};
  instMem[3] = {`SINGLE, `REGB, (5'h01),(5'h02),`STR};
  instMem[4] = {`PAIR, `IMMB, (5'h01),(5'h01),`ADDR};
  instMem[5] = {`SINGLE, `IMMB, (5'h01),(5'h02),`ADDR};
  instMem[6] = {`PAIR, `REGB, (5'h02),(5'h03),`LDR};	
  instMem[7] = {`SINGLE, `REGB, (5'h01),(5'h04),`LDR}; 
 */
 //LDR Test
 /*
  dataMem[6] = 16'h0005;
  instMem[0] = {`SINGLE, `IMMB, (5'h06),(5'h01),`MVR};
  instMem[1] = {`SINGLE, `REGB, (5'h01),(5'h02),`LDR};
 */
 //
 
 //STR test
 /*
  instMem[0] = {`PAIR, `IMMB, (5'h01),(5'h01),`MVR};
  instMem[1] = {`SINGLE, `IMMB, (5'h02),(5'h02),`MVR};
  instMem[2] = {`PAIR, `REGB, (5'h01),(5'h02),`STR};
  instMem[3] = {`SINGLE, `REGB, (5'h02),(5'h01),`STR};
  instMem[4] = {`PAIR, `REGB, (5'h01),(5'h02),`LDR};
  instMem[5] = {`SINGLE, `REGB, (5'h02),(5'h01),`LDR};
  */
 //
 //alu ADD test
 /*
  instMem[0] = {`SINGLE, `IMMB, (5'h01),(5'h01),`MVR};
  instMem[1] = {`SINGLE, `IMMB, (5'h01),(5'h02),`MVR};
  instMem[2] = {`SINGLE, `REGB, (5'h02),(5'h01),`ADDR};
  instMem[3] = {`PAIR, `REGB, (5'h00), (5'h00),`BEQ};
  instMem[4] = {16'h0003};
  */
 //
   
 
 //MVR test 1
 /*
  instMem[0] = {`SINGLE, `IMMB, (5'h01),(5'h01),`MVR};
  instMem[1] = {`PAIR, `IMMB, (10'h3E8) ,`MVI};
  instMem[2] = {`SINGLE, `IMMB,(5'h1F),(5'h02),`MVR};
  */
 //set registers to values 
 /*
for (i = 0 ; i <= 15 ; i = i + 1) 
begin
  #20 IR = {`IMMB, (5'b11110-i), (5'b11110-i), `MVR, `PAIR, `IMMB, i, i, `MVR};  
end
*/

// --> end                                             
$display("Running testbench");                       
end 

always @(posedge clock) begin
  IR_q = {instMem[PC+1], instMem[PC]};  
end

always @(posedge clock) begin
  if (data1BusEn) begin
    if (data1MemRW) begin
	   dataMem[dataAddrBus[15:0]] = dataDataBusIn[15:0];	 
	 end
	 else begin
	   dataDataBusOut[15:0] = dataMem[dataAddrBus[15:0]];
	 end
  end
  
  if (data2BusEn) begin
    if (data2MemRW) begin
	   dataMem[dataAddrBus[31:16]] = dataDataBusIn[31:16];	 
	 end
	 else begin
	   dataDataBusOut[31:16] = dataMem[dataAddrBus[31:16]];
	 end
  end
end


  
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin   :    test_l                                            
// code executes for every event on sensitivity list   
// insert code here --> begin  

reg [4:0] i;
                 
//#20
//IR =  {`SINGLE, `REGB, 5'b00011, 5'b00100, `MVR, `SINGLE, `IMMB, 5'b01001, 5'b00001, `MVR};
//#20
//IR = `NOP;
//#10
//IR =  {`SINGLE, `REGB, 5'b00011, 5'b00100, `MVR, `SINGLE, `IMMB, 5'b00110, 5'b00010, `MVR};
//#20
//IR =  {`SINGLE, `REGB, 5'b00011, 5'b00100, `MVR, `SINGLE, `REGB, 5'b00010, 5'b00001, `ADDR};  
//#10
//IR = {`NOP};                                                     




@eachvec;                                              
// --> end                                             
end                                                    
endmodule

